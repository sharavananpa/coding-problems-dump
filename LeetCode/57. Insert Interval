// Initial Solution
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        int insIndex = binarySearch(intervals, newInterval);
        LinkedList<int[]> res = new LinkedList<>();
        for (int i = 0; i < insIndex; ++i) {
            res.add(intervals[i]);
        }
        if (res.isEmpty() || res.getLast()[1] < newInterval[0]) {
                res.add(newInterval);
        } else {
            res.getLast()[1] = Math.max(res.getLast()[1], newInterval[1]);
        }
        for (int i = insIndex; i < intervals.length; ++i) {
            if (res.getLast()[1] < intervals[i][0]) {
                res.add(intervals[i]);
            } else {
                res.getLast()[1] = Math.max(res.getLast()[1], intervals[i][1]);
            }
        }
        return res.toArray(new int[0][0]);
    }

    private int binarySearch(int[][] intervals, int[] newInterval) {
        int i = 0;
        int j = intervals.length - 1;
        int mid = 0;
        while (i <= j) {
            mid = (i + j) >>> 1;
            if (newInterval[0] < intervals[mid][0]) {
                j = mid - 1;
            } else if (newInterval[0] > intervals[mid][0]) {
                i = mid + 1;
            } else {
                return mid;
            }
        }
        return i;
    }
}

// Improved Solution
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        LinkedList<int[]> res = new LinkedList<>();
        int i = 0, n = intervals.length;
        while (i < n && intervals[i][1] < newInterval[0])
            res.add(intervals[i++]);

        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = Math.min(intervals[i][0], newInterval[0]);
            newInterval[1] = Math.max(intervals[i][1], newInterval[1]);
            i++;
        }
        res.add(newInterval);
        while (i < n)
            res.add(intervals[i++]);
        return res.toArray(new int[0][0]);
    }
}