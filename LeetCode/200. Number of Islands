// First Raw Solution
class Solution {
    public int numIslands(char[][] grid) {
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        Queue<Pair<Integer, Integer>> queue = new LinkedList<>();
        int noOfIslands = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (visited[i][j] == false && grid[i][j] == '1') {
                    queue.add(new Pair<Integer, Integer>(i, j));
                    visited[i][j] = true;
                    noOfIslands++;
                }
                while (!queue.isEmpty()) {
                    Pair<Integer, Integer> current = queue.remove();
                    System.out.println(current);
                    if(current.getValue() != grid[0].length - 1 && visited[current.getKey()][current.getValue() + 1] == false && grid[current.getKey()][current.getValue() + 1] == '1') {
                        queue.add(new Pair<Integer, Integer>(current.getKey(), current.getValue() + 1));
                        visited[current.getKey()][current.getValue() + 1] = true;
                    }

                    if(current.getKey() != grid.length - 1 && visited[current.getKey() + 1][current.getValue()] == false && grid[current.getKey() + 1][current.getValue()] == '1') {
                        queue.add(new Pair<Integer, Integer>(current.getKey() + 1, current.getValue()));
                        visited[current.getKey() + 1][current.getValue()] = true;
                    }

                    if(current.getValue() != 0 && visited[current.getKey()][current.getValue() - 1] == false && grid[current.getKey()][current.getValue() - 1] == '1') {
                        queue.add(new Pair<Integer, Integer>(current.getKey(), current.getValue() - 1));
                        visited[current.getKey()][current.getValue() - 1] = true;
                    }

                    if(current.getKey() != 0 && visited[current.getKey() - 1][current.getValue()] == false && grid[current.getKey() - 1][current.getValue()] == '1') {
                        queue.add(new Pair<Integer, Integer>(current.getKey() - 1, current.getValue()));
                        visited[current.getKey() - 1][current.getValue()] = true;
                    }
                }
            }
        }
        
        
        return noOfIslands;
    }
}

// Better solution with dfs and bfs
class Solution {
    public int numIslands(char[][] grid) {
        int noOfIslands = 0;
        for (int i = 0; i < grid.length; ++i) {
            for (int j = 0; j < grid[0].length; ++j) {
                if (grid[i][j] == '1') {
                    // bfs(grid, i, j);
                    dfs(grid, i, j);
                    ++noOfIslands;
                }
            }
        }
        return noOfIslands;
    }

    private void bfs(char[][] grid, int i, int j) {
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[] {i, j});
        grid[i][j] = '2';
        int[][] directions = new int[][] {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        while (!q.isEmpty()) {
            int[] current = q.remove();
            for (int[] direction: directions) {
                int x = current[0] + direction[0];
                int y = current[1] + direction[1];
                if (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && grid[x][y] == '1') {
                    q.add(new int[] {x, y});
                    grid[x][y] = '2';
                }
            }
        }
    }

    private void dfs(char[][] grid, int i, int j) {
        if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)
            return;
        if (grid[i][j] != '1')
            return;

        grid[i][j] = '2';
        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j + 1);
        dfs(grid, i, j - 1);
    }
}