// Initial Solution (min heap)
class Solution {
    public int[][] kClosest(int[][] points, int k) {
        Queue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                double distanceA = (Math.pow(a[0], 2) + Math.pow(a[1], 2));
                double distanceB = (Math.pow(b[0], 2) + Math.pow(b[1], 2));
                if (distanceA < distanceB)
                    return -1;
                else if (distanceA > distanceB)
                    return 1;
                else
                    return 0;
            }
        });
        for (int[] point: points) {
            pq.add(point);
        }

        int[][] result = new int[k][2];

        for (int i = 0; i < k; i++) {
            result[i] = pq.poll();
        }

        return result;
    }
}

// Better Solution (max heap)
class Solution {
    public int[][] kClosest(int[][] points, int k) {
        Queue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                double distanceA = a[0] * a[0] + a[1] * a[1];
                double distanceB = b[0] * b[0] + b[1] * b[1];
                return Double.compare(distanceB, distanceA);
            }
        });

        for (int[] point: points) {
            pq.add(point);
            if (pq.size() > k)
                pq.poll();
        }

        int[][] result = new int[k][2];

        for (int i = 0; i < k; ++i) {
            result[i] = pq.poll();
        }

        return result;
    }
}

// Even Better
class Solution {
    public int[][] kClosest(int[][] points, int k) {
        Queue<int[]> pq = new PriorityQueue<>((a, b) -> (b[0] * b[0] + b[1] * b[1]) - (a[0] * a[0] + a[1] * a[1]));

        for (int[] point: points) {
            pq.add(point);
            if (pq.size() > k)
                pq.poll();
        }

        return pq.toArray(new int[0][0]);
    }
}