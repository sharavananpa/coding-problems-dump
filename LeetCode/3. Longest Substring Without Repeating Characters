// Sliding Window - Perfert imo

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> set = new HashSet<>();
        int maxLength = 0, left = 0, right = 0;
        int N = s.length();
        while (left < N && right < N) {
            if (!set.contains(s.charAt(right))) {
                set.add(s.charAt(right++));
                maxLength = Math.max(maxLength, right - left);
            } else {
                set.remove(s.charAt(left++));
            }
        }
        return maxLength;
    }
}


// Sliding Window

class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        int N = s.length();

        HashMap<Character, Integer> map = new HashMap<>();

        int left = 0, max = 0;

        for (int right = 0; right < N; right++) {
            
            Character current = s.charAt(right);
            
            if (!map.containsKey(current) || map.get(current) < left) {
                map.put(current, right);
                max = Math.max(max, right - left + 1);
            } else {
                left = map.get(current) + 1;
                map.put(current, right);
            }
        }
        return max;
    }
}

// Sliding Window - Changed condition

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        int maxLength = 0, left = 0;
        for (int right = 0; right < s.length(); ++right) {
            if (map.containsKey(s.charAt(right)) && map.get(s.charAt(right)) >= left) {
                left = map.get(s.charAt(right)) + 1;
            } else {
                maxLength = Math.max(maxLength, right - left + 1);
            }
            map.put(s.charAt(right), right);
        }
        return maxLength;
    }
}

// Naive Approach

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> set = new HashSet<>();
        int maxLength = 0;
        for (int i = 0; i < s.length(); ++i) {
            for (int j = i; j < s.length(); ++j) {
                if (!set.contains(s.charAt(j))) {
                    set.add(s.charAt(j));
                    maxLength = Math.max(maxLength, j - i + 1);
                } else {
                    break;
                }
            }
            set.clear();
        }
        return maxLength;
    }
}