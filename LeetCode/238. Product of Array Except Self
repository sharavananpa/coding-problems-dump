class Solution {
    public int[] productExceptSelf(int[] nums) {

        int[] prefixProduct = new int[nums.length];
        int[] postfixProduct = new int[nums.length];

        int product = 1;
        for (int i = 0; i < nums.length; i++) {
            prefixProduct[i] = product;
            product *= nums[i];
        }

        product = 1;
        for (int i = nums.length - 1; i >= 0; i--) {
            postfixProduct[i] = product;
            product *= nums[i];
        }

        for (int i = 0; i < nums.length; i++) {
            nums[i] = prefixProduct[i] * postfixProduct[i];
        }

        return nums;
    }
}

// 2

class Solution {
    public int[] productExceptSelf(int[] nums) {

        int N = nums.length;

        int[] output = new int[N];

        output[0] = 1;
        for (int i = 1; i < N; i++) {
            output[i] = output[i-1] * nums[i-1];
        }

        int product = 1;
        for (int i = N-1; i >= 0; i--) {
            output[i] *= product;
            product *= nums[i];
        }

        return output;
    }
}