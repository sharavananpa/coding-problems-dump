// Two Queues

class MyStack {

    Queue<Integer> qMain;
    Queue<Integer> qAux;

    public MyStack() {
        qMain = new LinkedList<Integer>();
        qAux = new LinkedList<Integer>();
    }
    
    public void push(int x) {
        qAux.add(x);
        while(!qMain.isEmpty()) {
            qAux.add(qMain.remove());
        }
        Queue<Integer> temp = qMain;
        qMain = qAux;
        qAux = temp;
    }
    
    public int pop() {
        return qMain.remove();
    }
    
    public int top() {
        return qMain.element();
    }
    
    public boolean empty() {
        return qMain.isEmpty();
    }
}

// One Queue

class MyStack {

    Queue<Integer> qMain;

    public MyStack() {
        qMain = new LinkedList<Integer>();
    }
    
    public void push(int x) {
        qMain.add(x);
        for(int i = 0; i < qMain.size() - 1; i++) {
            qMain.add(qMain.remove());
        }
    }
    
    public int pop() {
        return qMain.remove();
    }
    
    public int top() {
        return qMain.element();
    }
    
    public boolean empty() {
        return qMain.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */