// Uses extra space
class Solution {
    public void setZeroes(int[][] matrix) {
        ArrayList<Pair<Integer, Integer>> list = new ArrayList<>();
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if(matrix[i][j] == 0) {
                    list.add(new Pair<Integer, Integer>(i, j));
                }
            }
        }

        for (Pair<Integer, Integer> pair : list) {
            for (int k = 0; k < matrix.length; k++) {
                matrix[k][pair.getValue()] = 0;
            }

            for (int k = 0; k < matrix[0].length; k++) {
                matrix[pair.getKey()][k] = 0;
            }
        }
    }
}

// Optimized (Space Complexity ~(1))
class Solution {
    public void setZeroes(int[][] matrix) {
        boolean firstRowZero = false;

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if(matrix[i][j] == 0) {
                    if (i > 0)
                        matrix[i][0] = 0;
                    else
                        firstRowZero = true;
                    matrix[0][j] = 0;
                }
            }
        }

        for (int i = 1; i < matrix.length; i++) {
            if (matrix[i][0] == 0) {
                for (int j = 0; j < matrix[0].length; j++) {
                    matrix[i][j] = 0;
                }
            }
        }

        for (int j = 0; j < matrix[0].length; j++) {
            if (matrix[0][j] == 0) {
                for (int i = 0; i < matrix.length; i++) {
                    matrix[i][j] = 0;
                }
            }
        }

        if (firstRowZero) {
            for (int j = 0; j < matrix[0].length; j++) {
                matrix[0][j] = 0;
            }
        }
    }
}