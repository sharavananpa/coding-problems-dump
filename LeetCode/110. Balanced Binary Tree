// Bruteforce Solution
class Solution {
  public boolean isBalanced(TreeNode root) {
    if (root == null)
      return true;
    return Math.abs(maxDepth(root.left) - maxDepth(root.right)) <= 1 && //
        isBalanced(root.left) &&                                        //
        isBalanced(root.right);
  }

  private int maxDepth(TreeNode root) {
    if (root == null)
      return 0;
    return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
  }
}

// Better Solution
class Solution {
  public boolean isBalanced(TreeNode root) {
    return maxDepth(root) != -1;
  }

  // Returns the height of root if root is balanced; otherwise, returns -1.
  private int maxDepth(TreeNode root) {
    if (root == null)
      return 0;

    final int left = maxDepth(root.left);
    if (left == -1)
      return -1;
    final int right = maxDepth(root.right);
    if (right == -1)
      return -1;
    if (Math.abs(left - right) > 1)
      return -1;

    return 1 + Math.max(left, right);
  }
}

// One other Solution
class Solution {
  public boolean isBalanced(TreeNode root) {
    maxDepth(root);
    return ans;
  }

  private boolean ans = true;

  // Returns the height of root and sets ans to false if root unbalanced.
  public int maxDepth(TreeNode root) {
    if (root == null || !ans)
      return 0;
    final int left = maxDepth(root.left);
    final int right = maxDepth(root.right);
    if (Math.abs(left - right) > 1)
      ans = false;
    return Math.max(left, right) + 1;
  }
}