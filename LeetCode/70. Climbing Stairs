// Iterative (elegant)
class Solution {
    public int climbStairs(int n) {
        int prev = 1;
        int curr = 1;
        for (int i=0; i<n-1; i++) {
            curr = prev + curr;
            prev = curr - prev;
        }
        return curr;
    }
}

// Recursive (with memoization)
class Solution {
    HashMap<Integer, Integer> memo = new HashMap<>();
    public int climbStairs(int n) {
        if (n < 2) {
            return 1;
        }
        if (!memo.containsKey(n))
            memo.put(n, climbStairs(n-1) + climbStairs(n-2));
        return memo.get(n);
    }
}