// BackTracking (with memo)
class Solution {
    HashMap<Integer, Integer> memo = new HashMap<>();
    public int coinChange(int[] coins, int amount) {
        if (amount == 0)
            return 0;
        if (amount < 0)
            return -1;
        if (memo.containsKey(amount))
            return memo.get(amount);
        
        int min = Integer.MAX_VALUE;
        for (int coin: coins) {
            int res = coinChange(coins, amount - coin);
            if (res >= 0 && res < min)
                min = res + 1;
        }

        int minFinal = min == Integer.MAX_VALUE ? -1 : min;
        memo.put(amount, minFinal);
        return minFinal;
    }
}

// DP (Iterative)
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, 1, amount + 1, amount + 1);
        for (int i = 1; i <= amount; i++) {
            for (int coin: coins) {
                if (coin <= i)
                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);
            }
        }
        return dp[amount] == amount + 1 ? -1 : dp[amount];
    }
}

// DP (Iterative 2) - https://walkccc.me/LeetCode/problems/322/#__tabbed_1_2
class Solution {
    public int coinChange(int[] coins, int amount) {
      // dp[i] := the minimum number of coins to make up i
      int[] dp = new int[amount + 1];
      Arrays.fill(dp, 1, dp.length, amount + 1);
  
      for (final int coin : coins)
        for (int i = coin; i <= amount; ++i)
          dp[i] = Math.min(dp[i], dp[i - coin] + 1);
  
      return dp[amount] == amount + 1 ? -1 : dp[amount];
    }
  }